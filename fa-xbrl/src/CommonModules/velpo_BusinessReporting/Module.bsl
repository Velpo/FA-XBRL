///////////////////////////////////////////////////////////////////////////////////////////////////////
// FA-XBRL, Bookkeeping and XBRL proccessor
// Copyright (c) 2019, Velpo (Paul Tarasov)
//
// Subsystem:  Taxonomy Update
///////////////////////////////////////////////////////////////////////////////////////////////////////

Функция ПроверитьВхождениеЭлементаВВидыЗначений(ВидЗначения, Элемент) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидЗначения", ВидЗначения);
	Запрос.УстановитьПараметр("Элемент", Элемент);
	Запрос.Текст = 
	"SELECT TOP 1
	|	ConceptValueTypesMembers.Ref AS Ref
	|FROM
	|	ChartOfCharacteristicTypes.ConceptValueTypes.Members AS ConceptValueTypesMembers
	|WHERE
	|	ConceptValueTypesMembers.Ref = &ВидЗначения
	|	AND ConceptValueTypesMembers.Member = &Элемент
	|";
	РезультатЗапроса = Запрос.Выполнить();
	Возврат НЕ РезультатЗапроса.Пустой();

КонецФункции // ПроверитьВхождениеЗначенияВПеречисление()
 
Процедура ОтменаПроведенияРегистратора(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	//Если ТипЗнч(Источник.Ссылка) = Тип("ДокументСсылка.Проводка") И ЗначениеЗаполнено(Источник.Ссылка) Тогда
	//	Операция = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник.Ссылка,"Операция");
	//	ДокументОснование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Операция,"ДокументОснование");
	//    Если ЗначениеЗаполнено(ДокументОснование) 
	//		И ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ОперацияНПС") 
	//		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование,"ВидОперацииНПС") = Справочники.ВидыОперацийНПС.ВводОстатковДляXBRL Тогда	
	//		Возврат;
	//	КонецЕсли;
	//КонецЕсли;	
	//
	//УстановитьПривилегированныйРежим(Истина);
	//
	//СсылкаДокумент = Источник.Ссылка;
	//Если СсылкаДокумент.Пустая() Тогда
	//	Возврат;
	//КонецЕсли;
	//
	//МетаданныеДокумента = СсылкаДокумент.Метаданные();
	//
	//Если МетаданныеДокумента.Name = "Факт" Тогда
	//	Возврат;
	//ИначеЕсли МетаданныеДокумента.Проведение = Метаданные.СвойстваОбъектов.Проведение.Разрешить
	//	И РежимЗаписи = РежимЗаписиДокумента.Запись Тогда
	//	Возврат;
	//КонецЕсли;
	//	
	//Запрос = Новый Запрос;
	//Запрос.УстановитьПараметр("Регистратор", Источник.Ссылка);
	//Запрос.Текст = 
	//"ВЫБРАТЬ
	//|	Ссылка
	//|ИЗ
	//|	Документ.Факт
	//|ГДЕ
	//|	Регистратор = &Регистратор
	//|	И ПометкаУдаления = ЛОЖЬ
	//|";
	//Выборка = Запрос.Выполнить().Выбрать();
	//Пока Выборка.Следующий() Цикл
	//	ОбСсылка = Выборка.Ссылка.ПолучитьОбъект();
	//	ОбСсылка.ПометкаУдаления = Истина;
	//	ОбСсылка.Регистратор = Неопределено;
	//	ОбСсылка.ПервичныйДокумент = Неопределено;
	//	ОбСсылка.МоментИзменения = ТекущаяУниверсальнаяДатаВМиллисекундах();
	//	ОбСсылка.Записать(РежимЗаписиДокумента.ОтменаПроведения);
	//КонецЦикла;
	
КонецПроцедуры

Процедура СообщитьОбОшибкиДанных(Данные, Коллекция, Текст, ЗаписьЖурнала = Ложь, Отказ = Ложь) Экспорт

	ТекстИсключения = НСтр("ru='Ошибка: '") + Текст + Символы.ПС;
	Для каждого ЭлементКоллекции Из Коллекция Цикл
		ТекстИсключения =  ТекстИсключения + " " + Символы.ПС + ЭлементКоллекции.Name + ": " + Строка(Данные[ЭлементКоллекции.Name]);
	КонецЦикла; 
	
	Сообщить(ТекстИсключения, СтатусСообщения.Важное);
	
	Если ЗаписьЖурнала Тогда
		ЗаписьЖурналаРегистрации("ЗаписьВКубыXBRL", УровеньЖурналаРегистрации.Ошибка, Метаданные.Документы.Fact, Данные.Fact, Текст);
	КонецЕсли;

	Отказ = Истина;
	
КонецПроцедуры // СообщитьОбОшибкиДанных()

Процедура ОчиститьРегистрДанных(Регистр, Факт) Экспорт

		НаборЗаписей = Регистр.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Факт);
		НаборЗаписей.Записать(Истина);

КонецПроцедуры
